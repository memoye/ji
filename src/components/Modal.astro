---
interface Props {
  id: string;
  title: string;
}

const { id, title } = Astro.props;
---

<div
  id={id}
  class="hidden fixed inset-0 z-50 overflow-auto bg-black/30 backdrop-blur-sm"
>
  <div class="relative top-20 mx-auto max-w-md w-full">
    <div class="bg-white rounded-2xl shadow-xl p-6 max-w-[90vw] mx-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold text-gray-900">{title}</h3>
        <button class="modal-close text-gray-500 hover:text-gray-700">
          <svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
            <path
              fill-rule="evenodd"
              d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
              clip-rule="evenodd"></path>
          </svg>
        </button>
      </div>
      <slot />
    </div>
  </div>
</div>

<script define:vars={{ id }}>
  const modal = document.getElementById(id);
  const closeBtn = modal?.querySelector(".modal-close");

  function toggleModal() {
    modal?.classList.toggle("hidden");
    document.body.classList.toggle("overflow-hidden");
  }

  // Close modal when clicking close button
  closeBtn?.addEventListener("click", toggleModal);

  // Close modal when clicking outside
  modal?.addEventListener("click", (e) => {
    if (e.target === modal) toggleModal();
  });

  // Close on escape key
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && !modal?.classList.contains("hidden")) {
      toggleModal();
    }
  });

  // Expose toggleModal function globally for this modal
  window[`toggle${id}`] = toggleModal;
</script>
